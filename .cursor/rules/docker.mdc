---
description: 
globs: 
---
# Docker Integration Rules

## Description
This rule ensures that the AI follows Docker containerization standards for building and deploying the application, ensuring consistency and scalability across environments.

## Behavior
- **Containers**:
  - Ensure that all necessary services (API, database, etc.) are containerized using Docker.
  - Use a multi-stage Dockerfile for efficient builds.
- **Volumes**:
  - Ensure that Docker volumes are used for persistent storage (e.g., database data, logs).
  - Use Docker Compose to manage multi-container services.
- **Networking**:
  - Set up appropriate Docker networks to ensure secure communication between services (API, database, etc.).

## Example Dockerfile
```Dockerfile
FROM node:16 AS build

WORKDIR /app
COPY . .
RUN npm install
RUN npm run build

FROM node:16-slim

WORKDIR /app
COPY --from=build /app /app
RUN npm install --production
CMD ["npm", "start"]

## Docker Compose Example

version: '3'
services:
  api:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - db
  db:
    image: supabase/postgres
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
volumes:
  postgres_data: