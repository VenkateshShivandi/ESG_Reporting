---
description: 
globs: 
---
# Database Rules

This document integrates:
- **Schema Design Document**: Core table structures, indexing, and vector usage.
- **Backend Structure & Implementation Plan**: Guidelines for Flask, Supabase, migrations, and row-level security.
- **Cursorrules**: Security and compliance best practices.
- **Memory Bank**: Maintaining consistent references to evolving schema details.

---

## Supabase & PostgreSQL Guidelines
1. **Primary Data Store**
   - Use Supabaseâ€™s PostgreSQL for structured data (tables: `esg_documents`, `esg_chunks`, `esg_metrics`, etc. per *Schema Design Document*).
   - Leverage RLS (Row-Level Security) for fine-grained access control (ref: *Backend Structure Document*).

2. **Vector Storage & Indexing**
   - For AI embeddings, follow the structure in `esg_chunks` with a `VECTOR(...)` column (ref: *Schema Design Document*).
   - Use recommended indexes (`ivfflat` or `gin`) for performance in RAG queries (ref: *Implementation Plan*).

---

## Migration & Versioning
1. **Naming Conventions**
   - Use `YYYYMMDDHHMMSS_description.sql` (e.g., `20240906132435_create_profiles.sql`) per the *Implementation Plan*.
   - Keep a chronological record of migrations in a dedicated folder.

2. **Schema Evolution**
   - Always run migrations via CI/CD pipelines to preserve database integrity (ref: *Cursorrules*).
   - Document major schema changes in `memory-bank/progress.md` or `activeContext.md` (ref: *Memory Bank*).

---

## Data Integrity & Security
1. **Transactions**
   - Wrap multi-step inserts/updates/deletes in transactions to ensure atomicity (ref: *Backend Structure Document*).
2. **Validation & Constraints**
   - Use check constraints, foreign keys, and not-null constraints to maintain data consistency (ref: *Schema Design Document*).
   - Validate data in the application layer (Flask or Next.js API routes) before writing to the database (ref: *Implementation Plan*).
3. **Encryption & RLS**
   - Use AES-256 for sensitive data at rest, TLS 1.2 or above for data in transit (ref: *Backend Structure Document*).
   - Enforce row-level security policies to restrict data based on user roles or organization IDs (ref: *Schema Design Document*).

---

## Logging & Monitoring
- **Audit Trails**
  - Maintain an `audit_logs` table for comprehensive tracking of user and system events (e.g., uploads, edits, downloads, file moves, authentication, API calls) as outlined in the MVP plan (ref: *Implementation Plan*).
- **Error Handling**
  - Log database errors centrally (e.g., using Sentry or a similar tool) for real-time alerts (ref: *Implementation Plan*).
- **Performance Monitoring**
  - Periodically check indexes and run `EXPLAIN ANALYZE` on critical queries to optimize performance (ref: *Backend Structure Document*).

---

## New Considerations for MVP
- **Hierarchical Folder Structure**
  - Update the `esg_documents` table to support a folder or project grouping (e.g., by adding a `project_id` or `folder_id` column) to facilitate organized file management as per the new file management requirements.
