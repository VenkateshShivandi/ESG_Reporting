---
description: 
globs: 
---
# UI Rules

This document incorporates directives from:
- **App Flow Document**: Clarifies user journeys (upload, chatbot, dashboard, reporting).
- **Tech Stack & Frontend Guidelines**: Establishes Next.js, React, TailwindCSS, and Recharts usage.
- **System Prompts for V0 Integration & Memory Bank**: Maintains structured references for UI components and states.
- **Cursorrules**: Ensures consistent, modular design.

---

## Framework & Library Guidelines
1. **ShadCN**
   - Use ShadCN for a cohesive, standardized design system (ref: *Frontend Guidelines*).
   - **No Direct Overrides**: Avoid modifying `components/ui` directly. Extend or customize via project-specific wrappers.

2. **TailwindCSS**
   - Follow utility-first styling as recommended in the *Frontend Guidelines* and *Tech Stack*.
   - Ensure classes are descriptive and match the project’s naming conventions.

3. **Next.js + React**
   - Implement SSR/ISR (Server-Side Rendering / Incremental Static Regeneration) when appropriate for performance (ref: *App Flow Document*).
   - Use React hooks (`useState`, `useEffect`, `useContext`) and the Context API for global state management.

---

## Component Guidelines
1. **Structure & File Organization**
   - Place shared or reusable UI components in a `shared/components` or `common/components` directory, referencing the *Implementation Plan* for best practices.
   - Each component should include relevant docstrings or comments for clarity (ref: *Cursorrules*).

2. **Responsive & Accessible**
   - Follow a mobile-first approach (ref: *Frontend Guidelines*).
   - Ensure ARIA labels, keyboard navigation, and color contrast meet WCAG standards.

3. **Performance Optimization**
   - Use `React.memo()` or `useCallback()` for components that frequently re-render with large data sets (ref: *Tech Stack Document*).
   - Consider dynamic imports (lazy loading) for heavy UI modules (charts, large forms).

4. **Visual Consistency & New Reporting Enhancements**
   - Rely on ShadCN-provided styles for spacing, typography, and color.
   - **Reporting UI Enhancements**:
     - **Sidebar (Left Panel)**: Rename “Steps” to “Available Documents” to display user-uploaded files grouped by project/folder. Include a “+ Custom Document” button for new uploads.
     - **Main Content Area (Right Panel)**: Display detailed document content including sections such as Non-Functional Requirements, Constraints & Assumptions, and Known Issues.
     - **Bottom Panel**: Integrate a “Regenerate Document” feature allowing users to modify and re-generate document content.
     - **Action Buttons**: Provide options to copy, download the current document, or download all documents.
   - **Chatbot Integration**:
     - Clearly present the Voiceflow-powered chatbot interface with proper loading states and error handling for ESG queries.

---

## Memory Bank & Collaboration
- **Active Context Updates**
  - For major UI changes, update `memory-bank/activeContext.md` to document new patterns or usage (ref: *Memory Bank*).
- **Code Reviews**
  - Validate compliance with these rules in pull requests (ref: *System Prompts for V0 Integration*).
- **Testing**
  - Use Cypress or Playwright for end-to-end UI tests. Ensure coverage for user flows including file uploads, dashboard interactions, reporting, and chatbot functionality.
